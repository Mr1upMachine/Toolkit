@import "./functions";

// Sizing
#{exClass(full-size)} {
  @extend %w-100;
  @extend %h-100;
}

#{exClass(h-100)} {
  height: 100%
}

#{exClass(w-100)} {
  width: 100%;
}

// Flex rules
#{exClass(flex)} {
  display: flex;
}

#{exClass(flex-row)} {
  @extend %flex;
  flex-direction: row;
}

.flex-row-nowrap {
  @extend %flex-row;
  @extend %flex-nowrap;
}

#{exClass(flex-column)} {
  @extend %flex;
  flex-direction: column;
}

.flex-column-nowrap {
  @extend %flex-column;
  @extend %flex-nowrap;
}

#{exClass(flex-nowrap)} {
  flex-wrap: nowrap;
}

.flex-center {
  @extend %flex-v-center;
  @extend %flex-h-center;
}

#{exClass(flex-v-center)} {
  @extend %flex;
  align-items: center;
}

#{exClass(flex-h-center)} {
  @extend %flex;
  justify-content: center;
}

.flex-start {
  @extend %flex;
  justify-content: flex-start;
}

.flex-end {
  @extend %flex;
  justify-content: flex-end;
}

.flex-space-between {
  @extend %flex;
  justify-content: space-between;
}

#{exClass(flex-stretch)} {
  flex: 1 1 auto;
}

#{exClass(flex-static)} {
  flex: 0 0 auto;
}

// Layout helpers px (margin & padding)
$types: none top bottom left right;
$combos: top-bottom left-right;
$values: 10 20 30;

@mixin m-p-mixin($type, $num, $style) {
  @if $type == none {
    #{$style}: #{$num}px;
  } @else {
    #{$style}-#{$type}: #{$num}px;
  }
}

@each $val in $values {
  @each $type in $types {
    $typeName: unquote("");
    @if $type != none {
      $typeName: #{$type}-;
    }

    .m-#{$typeName}#{$val} {
      @include m-p-mixin($type, $val, margin);
    }

    .p-#{$typeName}#{$val} {
      @include m-p-mixin($type, $val, padding);
    }
  }

  .m-h-#{$val} {
    @extend .m-left-#{$val};
    @extend .m-right-#{$val};
  }

  .m-v-#{$val} {
    @extend .m-top-#{$val};
    @extend .m-bottom-#{$val};
  }
}
